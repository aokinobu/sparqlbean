{"name":"Batch","tagline":"batch processing for the glytoucan project","body":"# Glytoucan Batch\r\nbatch processing for the glytoucan project.  This utilizes the [spring batch framework](http://projects.spring.io/spring-batch/) for ETL processing of RDF.\r\n\r\n# Background\r\nRecommended to at least read through the spring batch quick start tutorial.  A concept called SparqlBeans are also used which are simply classes that store a sparql string, with other utilities provided as a layer between the application logic and the RDF triplestore.  By recording (or \"objectifying\") the SPARQL it is easier to see other examples of related RDF classes and possibly re-use/inherit for other means.  The SPARQLs used in this package are specific for the glytoucan project.\r\n\r\n# What is it?\r\nThe SparqlItemReader and SparqlItemWriter are prepared to provide reading and writing to a triplestore using the sparql language.\r\n\r\nBy providing a SparqlBean select sparql to the ItemReader, it iterates via OFFSETs and LIMITs in order to efficiently process results.\r\n\r\nUsually the SparqlItemReader is combined with a SparqlItemWriter, which can then be SparqlItemProcessed together to Read, Process, and then Write into the triplestore.\r\n\r\nAn example can be seen in the WurcsConvertSparqlBatch process.  \r\nThis is a Spring java-configured class which SELECT queries for strings from the RDF, runs a process to convert them, and then INSERTs the results back into the RDF:\r\n```java\r\n\r\n// configure the conversion process to use.  \r\n// Since there are a variety of conversion methods, a GlyConvert interface is used.\r\n\t@Bean\r\n\tGlyConvert getGlyConvert() {\r\n\t\treturn new GlycoctToWurcsConverter();\r\n\t}\r\n\r\n// configure the sparqlbeans, which contain the read and write sparql text.  \r\n// Notice how easy it is to modify the initialization of a sparql string.\r\n\t@Bean\r\n\tSelectSparql getSelectSparql() {\r\n\t\tSelectSparql select = new WurcsConvertSelectSparql();\r\n\t\tselect.setFrom(\"FROM <http://rdf.glytoucan.org> FROM <http://rdf.glytoucan.org/sequence/wurcs>\");\r\n\t\treturn select;\r\n\t}\r\n\r\n\t@Bean\r\n\tInsertSparql getInsertSparql() {\r\n\t\tConvertInsertSparql convert = new ConvertInsertSparql();\r\n\t\tconvert.setGraphBase(graphbase);\r\n\t\treturn convert;\r\n\t}\r\n\r\n// the sparql item reader is configured, specifying page size and the select.\r\n\t@Bean\r\n\tpublic ItemReader<SparqlEntity> reader() {\r\n\t\tSparqlItemReader<SparqlEntity> reader = new SparqlItemReader<SparqlEntity>();\r\n\t\treader.setSelectSparql(getSelectSparql());\r\n\t\treader.setPageSize(pageSize);\r\n\t\treturn reader;\r\n\t}\r\n\r\n// the item writer is also configured as normal.  \r\n\t@Bean\u0001\r\n\tpublic ItemWriter<SparqlEntity> writer() {\r\n\t\tSparqlItemWriter<SparqlEntity> reader = new SparqlItemWriter<SparqlEntity>();\r\n\t\treader.setInsertSparql(getInsertSparql());\r\n\t\treturn reader;\r\n\t}\r\n\r\n// finally, a specific processor can be passed in order to execute the conversion for each item read.\r\n\t@Bean\r\n\tpublic ItemProcessor<SparqlEntity, SparqlEntity> processor() {\r\n\t\tConvertSparqlProcessor process = new ConvertSparqlProcessor();\r\n\t\tprocess.setGlyConvert(getGlyConvert());\r\n\r\n\t\treturn process;\r\n\t}\r\n\r\n```\r\n\r\n# Credit\r\nThis development is funded by the Integrated Database Project by MEXT (Ministry of Education, Culture, Sports, Science & Technology) \r\nand the Program for Coordination Toward Integration of Related Databases by JST (Japan Science and Technology Agency) as part of the [International Glycan Registry project](http://www.glytoucan.org).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}